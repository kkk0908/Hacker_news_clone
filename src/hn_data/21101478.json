[{"item_id": 21102698, "text": "I don&#x27;t write much Awk code any more, but at one time it was my favorite programming language, and not just for little one-liners.<p>A while ago I ran across a couple of my old Awk programs and uploaded them to GitHub. One is an implementation of Mark V. Shaney (the infamous Markov chain program), the other takes source code and prints it out in a nice &quot;two up&quot; landscape format on a LaserJet II, including graphical boxes to replace the ASCII dividers in comments like this:<p><pre><code>  &#x2F;&#x2F;------------------\n  &#x2F;&#x2F; Some comment here\n  &#x2F;&#x2F;------------------\n</code></pre>\nI wish I had a sample printout, but they are long gone.<p>Awk was the first language I used that had associative arrays built into the language, which made SHANEY.AWK almost trivial to write. Especially compared with implementations I saw in C and other languages of the day.<p>I think LJPII.AWK is a good example of how you can write a fairly substantial program in Awk and have it be (mostly) readable. (It was written for either MKS Awk or Thompson Awk, I forget which - so there are a few things in it that may not be available in a typical Awk today.)<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;geary&#x2F;awk\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;geary&#x2F;awk</a><p><a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mark_V._Shaney\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mark_V._Shaney</a>", "by": "Stratoscope"}, {"item_id": 21105601, "text": "Reminds me of a similar article [1]<p>Once you get a hang of how shell constructs like pipes, redirections, globs, variable&#x2F;command substitutions, etc, the various cli text processing tools like grep, sed, awk, perl, sort, tr, pr, paste, etc are worth to learn at least the basics. They have been through years of use and heavily optimized for performance. Just today, a friend of mine called to ask how to improve a Python script&#x27;s performance for 5-10 MB text file. After confirming he isn&#x27;t using any other special modules, I advised to check if the performance improves by implementing it using awk.<p>If anyone&#x27;s interested in examples based tutorials on cli text processing tools, check out my github repo [2]<p>[1] <a href=\"https:&#x2F;&#x2F;blog.jpalardy.com&#x2F;posts&#x2F;why-learn-awk&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;blog.jpalardy.com&#x2F;posts&#x2F;why-learn-awk&#x2F;</a><p>[2] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processi...</a>", "by": "asicsp"}, {"item_id": 21101889, "text": "Awk is a fantastic &quot;swiss army knife&quot;, and always included (in some form) on every *nix.<p>The article mentions FS but this is easier to access with -F. e.g. for some quick and dirty CSV munging-<p>awk -F, &#x27;{print $2}&#x27;<p>Something else I find super useful is the built-in regex matching, e.g.-<p>awk &#x27;&#x2F;ERROR&#x2F;{print $(NF-1)}&#x27;<p>or maybe picking out all 503&#x27;s from an web server access log-<p>awk &#x27;&#x2F;503&#x2F;{print}&#x27;<p>edit: formatting....wow hn is bad for this", "by": "kylek"}, {"item_id": 21102118, "text": "Thinking over this, it just (finally) struck me that awk (and sed, grep, etc.) are basically just <i>libraries</i> (more like DSLs), and the shell is <i>just another scripting language</i> with a REPL&#x2F;notebook environment.<p>When that&#x27;s the case, what makes them particularly useful compared to some other language with a uniform syntax and possibly better forms of &quot;glue&quot; -- say Python, or lisp, or whatever? Why not allow people to acquire proficiency in just one language, and use it consistently to communicate with their computer? I don&#x27;t think ubiquity&#x2F;portability is a compelling answer, since (for many&#x2F;most people who care about this) it is relatively easy to install the environment of their choice on their personal computing device. BTW, we must also strive to maintain that flexibility in the next generation of computing devices.<p>As an aside, folks who do like the task-focused nature of shell DSLs might appreciate language-oriented programming with Racket.", "by": "ssivark"}, {"item_id": 21111179, "text": "I wonder. Unless you have this syntax (and their semantics) memorized so that it just flies from your fingers, it does seem much easier to me to use whatever your language of choice is (Python, Java, ...) to whip up a script. Sure, awk will be terser, but in my case at least, the bottleneck will not be typing, it will be looking up awk features and syntax.<p>Maybe if you do this every day though. I only have need for things like this once every few months.", "by": "norswap"}, {"item_id": 21104422, "text": "I&#x27;ve found the combination of sed &amp; awk to be a really powerful duo.<p>One of my earliest development projects circa 2002 was to create a complex awk &amp; sed program that took tons of database blobs with inconsistent semi-structured test from a publishing company and converted it to XML, automatically prompting the user for input (using the Pico text editor) whenever there was something that couldn&#x27;t be resolved. It saved thousands of hours as part of a metadata digitization project that got their journals into ProQuest.<p>As only a semi-literate programmer at the time, it was significantly easier than trying the same thing with a &quot;traditional&quot; programming language. On occasion I still call to awk withing python code when I need to do a one-off quick &amp; dirty &lt;something&gt;<p>For those interested, if you can find a copy, there&#x27;a truly excellent book on awk:<p><i>&quot;The Awk Programming Language&quot;</i>, by Alfred Aho, Brian Kernighan, and Peter J. Weinberger", "by": "ineedasername"}, {"item_id": 21103150, "text": "I use a lot of Perl and occasionally some awk. My experience is that Perl is a lot faster (it really shows when you have millions of lines of text to chew).<p>For example, I compared two scripts that find the longest line in a file: Perl took about a second when awk took 21s.", "by": "forinti"}, {"item_id": 21102721, "text": "I used to struggle at dtrace  until I realized it was just awk for a probes instead of regular expressions.", "by": "salgernon"}, {"item_id": 21101886, "text": "Prior discussions:<p><a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=1738688\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=1738688</a><p><a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=2932450\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=2932450</a>", "by": "kuharich"}, {"item_id": 21105607, "text": "I love awk, grep and sed.<p>But I am wondering: in a professional setup, are there no better tools to analyse and interpret structured log messages out there?", "by": "splittingTimes"}, {"item_id": 21105009, "text": "I recently learnt awk but had a hard time figuring things out (had been trying to learn it since 6yrs)<p>So I wrote a small guide which is hands on for awk<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;thewhitetulip&#x2F;awk-anti-textbook\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;thewhitetulip&#x2F;awk-anti-textbook</a>", "by": "thewhitetulip"}, {"item_id": 21105747, "text": null, "by": null}, {"item_id": 21104570, "text": "Awk and sed can provide a better integration with &quot;modern&quot; formats like JSON&#x2F;YAML&#x2F;Protobuf&#x2F;etc. And with corresponding tools like jq&#x2F;pq&#x2F;rq. It would help to keep them popular still.", "by": "xvilka"}, {"item_id": 21103117, "text": "403 Forbidden", "by": "llacb47"}, {"item_id": 21103971, "text": null, "by": null}, {"item_id": 21101855, "text": "Why is this linking to the wayback machine? This blog post is live on the same website at the same url.<p><a href=\"https:&#x2F;&#x2F;gregable.com&#x2F;2010&#x2F;09&#x2F;why-you-should-know-just-little-awk.html\" rel=\"nofollow\">https:&#x2F;&#x2F;gregable.com&#x2F;2010&#x2F;09&#x2F;why-you-should-know-just-little...</a>", "by": "j2kun"}, {"item_id": 21103316, "text": "I think the traffic is too much. 403 Forbidden.", "by": "jadia"}, {"item_id": 21102184, "text": "I have, and read, a book on awk (the AWK programming language, by guess-the-initials) and didn&#x27;t see the point. If I need regexes I have emacs. For CSVs I use excel or LibreOffice.<p>It has been a while so could someone remind me why awk is so fab? Perhaps it&#x27;s just I&#x27;ve never met the right use case to make me fall in love.<p>Sorry if it&#x27;s a dumb question. TIA", "by": "tempguy9999"}, {"item_id": 21103748, "text": "A lot of the examples are just reimplenting cut.", "by": "jpxw"}]