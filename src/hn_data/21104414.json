[{"item_id": 21104834, "text": "SBCL is an implementation of Common Lisp with a long and rich history (if you include CMUCL as a part of that history). It\u2019s an implementation that sees regular contributions from random travelers, and the team of regular developers (if you can even call them a \u201cteam\u201d) is small and loosely knit but surprisingly steady. There\u2019s a trusted set of individuals with commit privileges and many of them hack and improve SBCL just about every day. Some of the regular devs are new with their first commits clocking in less than 6 months ago, and others are long retired, having moved on to other things beyond SBCL.<p>SBCL is a piece of software that\u2019s not inundated with opinions, politics, drama, and other organizational issues. That is in part due to the fact that the folks who develop it must stay grounded. ANSI Common Lisp is, well, a standardized language and the SBCL aims to follow it to a tee.<p>SBCL is just a small-town coffee shop compared to the Starbucks and Dunkin Donuts of other language implementations. As a professional and commercial user of their software, the size of the user base and developer team used to worry me. But 20 years of stability\u2014compared to even the most contemporary language ecosystems\u2014has given me solace in my choice to use it.", "by": "reikonomusha"}, {"item_id": 21105695, "text": "SBCL is amazing.  If you walk the development history back trough forks, organizations and names the starting point is Spice Lisp[1] in 1980, then CMUCL in 1985 and finally SBCL in 1999.<p>[1]: See page 58 in Performance and evaluation of Lisp systems by Richard Gabriel <a href=\"http:&#x2F;&#x2F;rpgpoet.com&#x2F;Files&#x2F;Timrep.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;rpgpoet.com&#x2F;Files&#x2F;Timrep.pdf</a>", "by": "nabla9"}, {"item_id": 21106263, "text": "I&#x27;ve used SBCL regularly since the initial announcement, truly an excellent piece of software that only keeps getting better.<p>Being able to sit back and watch bug fixes and performance improvements trickle in without having to deal with the usual torrent of new&#x2F;deprecated features is a nice change from other languages.<p>Using implementation-specific features is mostly frowned upon in the CL community, but SBCL is so rock-solid and readily available that I feel less and less motivated to deal with cross-implementation issues. Much like GHC in Haskell land.<p>Keep it up!", "by": "codr7"}, {"item_id": 21106369, "text": "It is truly amazing that SBCL is so stable and fast without much (if any) Big Co. support!<p>Also, Portacle [1] is a SBCL + (Emacs based) IDE distro that&#x27;s super easy to setup and use.<p>[1] <a href=\"https:&#x2F;&#x2F;portacle.github.io\" rel=\"nofollow\">https:&#x2F;&#x2F;portacle.github.io</a>", "by": "divs1210"}, {"item_id": 21104674, "text": "Fantastic implementation - rock solid. It does feel like the OS X version trails the rest of the platforms, is that true ? It hasn&#x27;t mattered much for the work I&#x27;ve done with it but curious.", "by": "rogerb"}]