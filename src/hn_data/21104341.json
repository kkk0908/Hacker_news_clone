[{"item_id": 21111818, "text": "The &quot;Avoid Learning Anything New&quot; advice is insane. (Well, practically all of it is, but that one really stands out).<p>I think the exact opposite advice is far better: never assume the way you know how to do something is best, and always be on the lookout for what others are doing that might be better.<p>Here&#x27;s the thing about learning: the more you learn, the easier learning the next thing becomes. You form links, insights on relationships, new concepts that apply to old things, etc. If this guy thinks learning is such a burden, it&#x27;s probably because he refuses to learn anything in the first place.<p>If he thinks he&#x27;s a poor programmer, it probably has less to do with innate ability and 100% to do with the attitudes he gives as &quot;advice&quot; in this blog.", "by": "overgard"}, {"item_id": 21111372, "text": "This is such a bizarre post.  If you have the self-awareness to admit this about yourself, you are probably not a poor programmer.<p>Poor programmers do things like allowing an incoming request to spin up unlimited concurrent threads.   Poor programmers erroneously throw exceptions on any operational deviation - even it if can be handled without error.<p>Most importantly - poor programmers do not learn from their mistakes and are unable to see that they are poor programmers.", "by": "jugg1es"}, {"item_id": 21111777, "text": "&gt; Only learn something new when forced<p>This could be devastating, much more in little&#x2F;medium company. I know of successful companies (I mean company with  successful products ) with a C&#x2F;C++ stack they considered &quot;good enough&quot; so they didn&#x27;t change anything: the C++ standards, architecture, structures. Often that line of conduct was supported by a management looking any change or improvement as a cost.  The result is always the same: a day they wake-up realizing that the &quot;product&quot; is a pile of crappy legacy code. I know some cases. One of those company was bought by a bigger company that asked to modify the stack to modern standards with disastrous results because the programmers wasn&#x27;t skilled to port the code base to modern standards&#x2F;architectures. In another case, the owners sold the entire division to another company, interested to the clients more than to the product and, after checking the status of the code base, the buyers hired a group of consultants that rewrote all in Java, with results that you can imagine.", "by": "gabrielblack"}, {"item_id": 21111839, "text": "It&#x27;s a great, succinct post.  <i>Deeply</i> uncool.  A programmer should be modest about their skills, skeptical about new-new things, eschew bullshit, and terrified of dependencies.  I buy the whole thing.<p>Moreover, I trust the advice of someone who rates themselves poorly more than someone proclaiming that they&#x27;re a hotshot.", "by": "human20190310"}, {"item_id": 21105764, "text": "ALAN. Avoid Learning Anything New<p>Terrible advice and mindset, \nIt&#x27;s good to learn for pleasure or curiosity.\nThis way, you can enjoy reading SICP, effective java, code complete... Or you can use a new system, Linux, Mac, Android, iOS.\nDoing it you model your thoughts and mind, learn new ways, practices, or patterns, you don\u2019t have to use then only for having learned, but even so, they will be useful to you.", "by": "albertoCaroM"}, {"item_id": 21112030, "text": "A very interesting post, since it poses one very conservative, tried and true approach to programming productively. I know a lot of programmers tend to arrive at those very same conclusions in their career. That said, I think the article and most of the commenters here don&#x27;t necessarily conflict with each other; every piece of advice can apply or not, depending on the circumstances.<p>On a larger scale, it&#x27;s remarkable that a lot of the general programming advice given today is more of a heuristic&#x2F;guide than a tautology, but many people still assert that their advice is The One Right Way To Do Things. It&#x27;s important to understand that the vast majority of all this advice comes from real examples of what worked and what didn&#x27;t. So, perhaps the best thing one can do as a programmer, in any domain, with any technology, whether you&#x27;re a great programmer or a poor programmer, is to listen to it all with zen and a grain of salt.", "by": "oneepic"}, {"item_id": 21104886, "text": "Two things jump out to me:<p>&gt; Only learn something new when forced<p>I think there is a balance between always doing things in a new way, versus always doing things as you&#x27;ve done before. When engineers are pushed too hard on deadlines, some will avoid learning new things as a short term approach for quick delivery. If your in that environment, you aren&#x27;t going to grow.<p>&gt; Avoid linking to other software unless forced.  It empirically rarely goes well.<p>Source? The rapid growth of npm, rubygems, and other ecosystems suggests otherwise.<p>I was hoping this would talk about how to support your co-workers (code review, culture, cohesion) or how to succeed at non-engineering tasks other &#x27;good&#x27; programers may overlook", "by": "robbya"}, {"item_id": 21111809, "text": "This is probably really bad but I totally empathize (and agree?)<p>KISS =&gt; everyone should do this<p>YAGNI =&gt; 95% of the shit I add is ignored (and I&#x27;ve got fairly objective proof that I can develop good projects)<p>ALAN =&gt; Master SQL, one scripting language, and how to use Stack Overflow. You&#x27;ll be the most useful dev on the team.<p>I agree with most of the rest.<p>Bonus point: never be afraid to tell a business person that what they want is an exceptionally bad idea. it usually is.", "by": "sixtypoundhound"}, {"item_id": 21111270, "text": "I\u2019ve been in a rut lately. Missing obvious things, shipping less than my best code. It\u2019s come to my attention that I\u2019m not as good at programming as I am at crafting database queries and tuning them but that\u2019s such a small niche given how easy it is to pick up SQL that I\u2019m having an existential crisis.<p>So I\u2019m working on getting better and getting more confident.", "by": "gigatexal"}, {"item_id": 21111216, "text": "I don&#x27;t think most of this applies only to &quot;poor programmers&quot;.<p>The advice about KISS is something many &quot;good&quot; programmers would benefit from following. Likewise, I&#x27;ve seen good programmers recommend using arrays as your first attempt at a data structure as well (e.g. Jonathan Blow, <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JjDsP5n2kSM\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JjDsP5n2kSM</a> )", "by": "anaphor"}, {"item_id": 21111870, "text": "Please don\u2019t store everything in Arrays. If your language supports tuples, use them. If it doesn\u2019t, at least use a struct if possible. Basically: Constrain the possible input and output space of your functions to the smallest amount of possible values. That way, you are reducing the room for errors significantly. Using arrays everywhere, many errors might even go unnoticed until an edge case occurs.", "by": "manmal"}, {"item_id": 21111887, "text": "I dislike this mindset too. For any other profession it would be crazy, but for programming it&#x27;s fine? What happened to apprentinceship and mastering the craft? Why is it fine to be considered a fool if you are not an expert programmer from the start? Should a blacksmith never make a sword, because at the beginning they can only make nails?", "by": "aledalgrande"}, {"item_id": 21111862, "text": "If you ALAN you can&#x27;t KISS. You won&#x27;t know what the simplest thing is. You&#x27;ll end up with miles of nested &quot;ifs&quot; instead of 4 lines of recursion. A gazillion &quot;else ifs&quot; instead of case etc.<p>He&#x27;s got one thing right. He&#x27;s a poor programmer. &quot;Success&quot; must be mighty loosely defined here.", "by": "noonespecial"}, {"item_id": 21111977, "text": null, "by": null}, {"item_id": 21111500, "text": "&gt; If you are bad at programming, you are still programming, something that very few people can do.<p>That&#x27;s heartening. I bet a very bad doctor or lawyer can still do some good somewhere too, as long as they don&#x27;t convince themselves they are better than they are.", "by": "Noumenon72"}, {"item_id": 21111722, "text": "I think the best way to make it as a &#x27;poor programmer&#x27; is be a domain specific &#x27;poor programmer&#x27;. I am bad a nearly all my programming in all my projects but probably just as efficient at getting jobs done than a &#x27;good programmer&#x27; because the feedback loop is fast. I can hack away until something works and then sometimes polish it off when it functions. I suggest work using really popular tools and there is usually a solution written up online easily found through Google. Such are the times.", "by": "benboughton1"}, {"item_id": 21111883, "text": "I wonder if the author has considered the idea that it&#x27;s not a lack of effort or some inherent cognitive gap that keeps them from being &quot;good&quot; programmers, but perhaps these beliefs instead?", "by": "KirinDave"}, {"item_id": 21111453, "text": "I totally agree with this stuff.<p>I was a professional programmer (now retired), and not a very good one. I&#x27;m familiar with Dunning-Kruger; I&#x27;ve worked with good programmers and bad ones, and I can tell the difference. Very good programmers are far and few.<p>I noticed that most of my colleagues were keen to learn new shit, like new JS libraries, new languages, new source-code management systems and so on. I think I lost interest in newness (for its own sake) about 15 years ago; I got turned over one time too many by a vendor that decided to withdraw support for a programming language that I had committed myself to.<p>I recommend retiring from programming. You don&#x27;t have to keep up with the young whippersnappers any more, you can carry on coding in bash, you don&#x27;t have to use git, Docker, or weird NoSQL systems. I realise that some of this new-fangled stuff is better than FORTRAN or VB6 or whatever; but learning a new programming system every 6 months is a total waste of time and effort. Get to be good with a few useful tools, then concentrate on people skills.<p>Or give it up completely, and learn cooking, or drumming, or interior-decorating.<p>I think there may be some rationale behind ageism in software development. For the first 25 years or so I got better at it, but I think after I turned 50 I started getting worse. Or at least, I got better slower. It took me longer to learn new tricks.<p>But I really think that some of those new tricks were not worth learning - for example, you can stuff Node and that ridiculous dependency system where the sun don&#x27;t shine. JS is a very clever language; but cleverness isn&#x27;t always best.", "by": "denton-scratch"}, {"item_id": 21111640, "text": null, "by": null}, {"item_id": 21111382, "text": "&gt; Finally, let the computer do the work; Dave Kirk talks about the elegance of brute force (I don&#x27;t know if it original with him).  This is a cousin of KISS.   Hardware is fast.  Software is hard.<p>Yeah, I don\u2019t know. The cloud bill is going to be expensive.", "by": "alephnan"}, {"item_id": 21111545, "text": "Rather than Avoid Learning Anything New, I&#x27;d say avoid implementing anything new. Options always come in handy, you don&#x27;t need to implement every new tech you learn about, but knowing it exists can make the difference between an impossible feature and a possible one", "by": "michannne"}, {"item_id": 21111630, "text": "std::vector everything!!\nTBH I feel anything beyond a simple array&#x2F;vector&#x2F;stack&#x2F;BST&#x2F;queue is pretty advanced and should only be touched by advanced programmers...", "by": "markus_zhang"}, {"item_id": 21111445, "text": "Most of this seems like good advice for all progreammer.<p>Except for the ALAN thing.  I think that should be modified with a few qualifications.  Don&#x27;t learn anything you will ever use less than 10 times or something.", "by": "BrissyCoder"}, {"item_id": 21111621, "text": "I assumed it was satire", "by": "rukuu001"}, {"item_id": 21111620, "text": "Kids, trust your elders on this one, the author is correct.", "by": "viburnum"}, {"item_id": 21111750, "text": "&gt; 4.  Make arrays your goto data structure.<p>The others are arguable.  But, in 2019, this is flat out bad advice.<p>Your &quot;go to&quot; data structures should be hash tables about 70% of the time and vectors about 30% of the time.  In 2019, memory and CPU are so stupidly abundant that the abstraction costs nothing in 99.9% of all cases.  The programmer gain for not having allocation, dereference, fencepost, and invalidation errors is enormous.<p>But, then, this is hardly surprising advice from someone who only learned about a &quot;scripting language&quot; in 2015.  The rest of us realized that those silly &quot;scripting languages&quot; were better than C++ for 90+% of our problems way back in 1995.<p>And anyone who has used a &quot;scripting language&quot; realizes <i>extremely</i> quickly just how stupidly useful hash tables are.", "by": "bsder"}, {"item_id": 21111761, "text": "Diligent practice?", "by": "codr7"}, {"item_id": 21111726, "text": null, "by": null}, {"item_id": 21111613, "text": "ALAN (avoid learning anything new) is bad advice if taken literally.<p>Learning fundamental knowledge such as programming paradigms, data structures, algorithms is something that will likely not become obsolete in a year by year basis. You should totally learn this if you have the time.<p>Now, memorizing every API in a framework that is likely going to change in 6 months, is probably not going to be very useful in 5 years (but it can be beneficial to achieve your short-term goals and move your career forward).<p>It&#x27;s not about &quot;avoid learning anything new&quot;, it&#x27;s about being tactical about what to learn.", "by": "29athrowaway"}, {"item_id": 21111327, "text": "i love this. this is a <i>good</i> programmer. sure to piss off a lot of people on here who think that because they have big salaries they are good at something.", "by": "the_cat_kittles"}, {"item_id": 21111427, "text": null, "by": null}, {"item_id": 21111992, "text": null, "by": null}]