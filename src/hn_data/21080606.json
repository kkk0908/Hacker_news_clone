[{"item_id": 21081778, "text": "These really aren&#x27;t idioms. An idiom in natural language is a phrase or saying whose meaning cannot be understood without someone telling you what it&#x27;s supposed to mean (that is, you can&#x27;t figure it out just by reading the words).<p>In programming, an idiom is a common, accepted way of accomplishing a task which you wouldn&#x27;t figure out to do all on your own and whose meaning isn&#x27;t obvious to programmers of other languages.<p>I suppose you could argue that certain idioms are more or less universal: using &quot;i&quot; as the index in a loop isn&#x27;t obvious even if you know a lot of math (why not use j?).<p>But no one who doesn&#x27;t program Python is going to figure out the first thing you do in any new Python project is write the line:<p><pre><code>    if __name__ == &quot;__main__&quot;:\n        main()\n\n</code></pre>\nThe fact that it&#x27;s impenetrable if it&#x27;s not first explained to you that you should do that is what makes it idiomatic.<p>Idiomatic also means particular to a specific person or group. If your website is based on comparing the same idiom in multiple languages, that&#x27;s a good indication it&#x27;s not actually idiomatic. That&#x27;s probably just a common task.", "by": "c3534l"}, {"item_id": 21084515, "text": "I&#x27;d like to draw people&#x27;s attention away from this and to Rosetta Code[1].<p>Programming Idioms has a slightly more modern interface, but what matters more is the content. Rosetta Code has <i>more</i> content and <i>better</i> content. If you don&#x27;t like Rosetta Code&#x27;s interface, I&#x27;d rather you tried to improve Rosetta Code rather than splintering the already-small community of people producing this sort of content.<p>[1] <a href=\"https:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Rosetta_Code\" rel=\"nofollow\">https:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Rosetta_Code</a>", "by": "kerkeslager"}, {"item_id": 21080911, "text": "First example I&#x27;ve checked is wrong [1]. Shuffle a list, with a static Random object initialization. Using a static random object is not thread-safe in .NET.<p>&quot;One common solution is to use a static field to store a single instance of Random and reuse it. That\u2019s okay in Java (where Random is thread-safe) but it\u2019s not so good in .NET \u2013 if you use the same instance repeatedly from .NET, you can corrupt the internal data structures.&quot; [2]<p>Very often the very same resources which claim to be the source of truth provide bad code examples.<p>[1] <a href=\"https:&#x2F;&#x2F;www.programming-idioms.org&#x2F;cheatsheet&#x2F;Csharp\" rel=\"nofollow\">https:&#x2F;&#x2F;www.programming-idioms.org&#x2F;cheatsheet&#x2F;Csharp</a><p>[2] <a href=\"https:&#x2F;&#x2F;codeblog.jonskeet.uk&#x2F;2009&#x2F;11&#x2F;04&#x2F;revisiting-randomness\" rel=\"nofollow\">https:&#x2F;&#x2F;codeblog.jonskeet.uk&#x2F;2009&#x2F;11&#x2F;04&#x2F;revisiting-randomnes...</a>", "by": "addictedcs"}, {"item_id": 21080780, "text": "Cool project.<p>I&#x27;m a bit reluctant to trust the quality of this, however.<p>The first example I looked up was &quot;Format date YYYY-MM-DD&quot; in Python, which wanted me to use &quot;isoformat()&quot;, which produces something else.<p>It was easy to correct, but I&#x27;d like to see a more &quot;democratic&quot; approach to getting correct examples, not just taking the latest one as fact.<p>edit: Sorry, more precise critique of the usage of &quot;isoformat&quot; would be &quot;which _might_ produce something else&quot; (it depends on the resolution of info in the date object).", "by": "markild"}, {"item_id": 21080724, "text": "Reminds me of <a href=\"http:&#x2F;&#x2F;www.rosettacode.org&#x2F;wiki&#x2F;Rosetta_Code\" rel=\"nofollow\">http:&#x2F;&#x2F;www.rosettacode.org&#x2F;wiki&#x2F;Rosetta_Code</a>", "by": "BucketSort"}, {"item_id": 21081023, "text": "Hm... <i>Idiom #186 Exit program cleanly</i> for <i>Python</i>:<p><pre><code>  import sys\n  sys.exit(0)\n</code></pre>\nWell, I guess I&#x27;ve been reinventing the wheel for my whole career... and thank god I did, my wheel is not only more performant, but also shorter and produces cleaner code (in my subjective opinion). As simple as:<p><pre><code>  # nothing</code></pre>", "by": "tomp"}, {"item_id": 21080967, "text": "If people didn&#x27;t re-invent the wheel we&#x27;d still be using wheels made of rock like the Flintstones (or at best wooden wheel, like 4 millennia ago).", "by": "coldtea"}, {"item_id": 21083538, "text": "The C implementation (and probably most of the other implementations) of Idiom #41 (reverse a string) doesn&#x27;t correctly handle UTF-8; it just reverses an array of bytes.  Normally I wouldn&#x27;t take objection to this, but:<p>1) The problem description specifies &quot;Each character must be handled correctly regardless its number of bytes in memory.&quot;, for which the C implementation rather plainly fails.<p>2) UTF-8 is so ubiquitous nowadays that any string-manipulating function that fails to correctly handle multibyte UTF-8 characters ought to be considered broken.", "by": "yellowapple"}, {"item_id": 21080981, "text": "The reason I re-invent wheels is because I don&#x27;t know the idiom I need to Google for.<p>I know what I need. I don&#x27;t know what it&#x27;s called in English. It&#x27;s faster to re-implement it than to learn the vocabulary.", "by": "ukj"}, {"item_id": 21081815, "text": "I love the &quot;check if integer addition will overflow&quot; in Python:<p>def adding_will_overflow(x, y):\n    return False<p>I have no idea if it&#x27;s actually true but I find that funny.", "by": "suixo"}, {"item_id": 21085141, "text": "If you&#x27;re going to list Fortran, COBOL, Prolog, Ada, Lisp, etc - I&#x27;m of the opinion that you need to list BASIC as well.<p>You list VB - but you don&#x27;t say if this is VB.NET, or prior VB versions (3,4,5,6)? VB.NET isn&#x27;t quite identical to the others...<p>...and VB is nothing like plain-old BASIC (and later dialects). In fact, you might lump them all under BASIC, as VB owes more to BASIC than being it&#x27;s own thing (though VB.NET seems more a name than being BASIC - just my opinion, though, as a long time ago VB3-6 coder - I&#x27;d call it &quot;BASIC-ish&quot;).<p>Other than that - this looks interesting. UI could use a bit more work, but seems like a good start.", "by": "cr0sh"}, {"item_id": 21080976, "text": "Do these count as \u201cidioms\u201d? Are these problems commonly messed up? I sampled a dozen or so and all the ones I saw are snippets for doing really basic tasks, but didn\u2019t seem particularly idiomatic, nor like tasks that cause a lot of bugs...", "by": "dahart"}, {"item_id": 21081173, "text": "Quality of the site aside, this concept would be great with JSON-API or something so it can be integrated with &lt;insert favorite editor&#x2F;IDE here&gt;.", "by": "thsealienbstrds"}, {"item_id": 21081691, "text": "Hey, it&#x27;s a neat project. Of course it could use improvements and a few disclaimers, but hey. Good on you for making it.<p>Added a request for Racket support!", "by": "velcrovan"}, {"item_id": 21080903, "text": "The wheel is, in terms of elegance and function, a perfect machine - it can&#x27;t be simplified, nor can it be improved upon. The point of the idiom being that any attempt to do so will either lead back to the wheel, or an inferior, unnecessarily complex alternative.<p>The problem with applying this to programming is the implication that there are languages, frameworks, patterns, and idioms which are equivalent to the wheel, in that there always exists one objectively correct, perfect solution which can&#x27;t be improved upon. I don&#x27;t believe programming has the equivalent of a wheel, yet.<p>What people tend to mean when they say &quot;don&#x27;t reinvent the wheel&quot; in the context of programming is either &quot;don&#x27;t waste time writing code that already exists and is <i>adequate</i>&quot; or &quot;don&#x27;t use $X because I like $Y.&quot;", "by": "krapp"}, {"item_id": 21084659, "text": "I think what happens with this is too much context is lost and in the end you can&#x27;t really describe what the &quot;right way&quot; to do things is.<p>Is the right way to delete a file<p><pre><code>   result = os.deletefile(path)\n</code></pre>\nor is it<p><pre><code>   try { os.deletefile(path) } catch (ex) { log(ex) } \n</code></pre>\nand what is the difference? Both may be valid and idiomatic <i>in the same language</i>. With more context such as a forum dialog or a StackOverflow question, these things are usually ironed out. But trying to do the same thing in Haskell (where you might have monadic error handling) or java (where you might have some exception handling chain) is very different even though the same function call is used in the end to actually delete a file.", "by": "alkonaut"}, {"item_id": 21080899, "text": null, "by": null}, {"item_id": 21081172, "text": "I&#x27;d look into &quot;webdesign-idioms&quot;", "by": "grumpy8"}, {"item_id": 21083891, "text": "The idea is great. But the low quality of many code examples puts me off. For me it would only work if the examples shown are made by a selection of top level developers. Then it would be really nice actually.<p>About the site design, the little menu on the left should better not move the content window to the right. Now, when you scroll down in &#x27;all idioms&#x27; for example, the list is right aligned and left has useless whitespace. A horizontal menu or dropdown would be better I guess.", "by": "blobs"}, {"item_id": 21082707, "text": "It seems like the checklist blurs the lines between a language and standard libraries, something that shouldn\u2019t be controversial but should be noted.<p>The checklist also seems to favor dynamic languages. E.g. does Go deserve to miss a checkmark because you can\u2019t determine if a variable exists at runtime (only at compile time)? I can sorta see the source inclusion checkbox, but it\u2019s not entirely clear from the example if this is testing for a macro support, AOP, or dynamic loading of libraries.", "by": "inlined"}, {"item_id": 21084013, "text": "I took a gander at a bunch of the C++ ones. They are pretty horrible. It looks like direct translations from generic snippets (just a syntax transformation).", "by": "banachtarski"}, {"item_id": 21080852, "text": "This site would really gain by having an upvote mechanism, this way users would know what is the &quot;best&quot; way of doing things. Plus, needs more languages.", "by": "self_awareness"}, {"item_id": 21095304, "text": "Fancy data structure manipulation perhaps should be part of a library (API) and not &quot;built in&quot; to the base language. The best languages make it easy to use vast API&#x27;s rather than hard-wire features into syntax.", "by": "tabtab"}, {"item_id": 21081262, "text": "I run a similar site:<p><a href=\"https:&#x2F;&#x2F;cup.github.io&#x2F;autumn\" rel=\"nofollow\">https:&#x2F;&#x2F;cup.github.io&#x2F;autumn</a>", "by": "svnpenn"}, {"item_id": 21085799, "text": "<a href=\"https:&#x2F;&#x2F;www.programming-idioms.org&#x2F;idiom&#x2F;117&#x2F;get-list-size&#x2F;1996&#x2F;c\" rel=\"nofollow\">https:&#x2F;&#x2F;www.programming-idioms.org&#x2F;idiom&#x2F;117&#x2F;get-list-size&#x2F;1...</a><p>lol", "by": "varjag"}, {"item_id": 21081798, "text": "The first one I saw was wrong, suggesting map over list comprehension in python...", "by": "nmca"}, {"item_id": 21082785, "text": "I was going to fill in the nim stuff, but:<p>Sorry, [nim] is currently not a supported language.", "by": "treeform"}, {"item_id": 21080864, "text": "I applaud the effort, but some examples (in JS at least) appear to be outdated.", "by": "Tade0"}, {"item_id": 21081093, "text": "Well, I knew it was only a matter of time before someone made this. This was one of my favorite &quot;some day I&#x27;ll have time and can make this site&quot; ideas.", "by": "kbenson"}, {"item_id": 21087678, "text": "This is a great place to see if I have conceptual knowledge gap. Which is why I am asking: where are the metaprogramming idioms?", "by": "mettamage"}, {"item_id": 21084524, "text": "It\u2019s funny how the most empty row in the coverage table is \u201cmatrix multiplication\u201d \u2014 only the FORTRAN implementation is there", "by": "stellalo"}, {"item_id": 21086653, "text": "Eh, what&#x27;s wrong with Rosetta Code? A metric ton of examples in a metric ton of languages.<p>What&#x27;s better about this one?", "by": "arcticwombat"}, {"item_id": 21082971, "text": "Been wanting this for a while. How else can one communicate the power of ciso8601 over step time?", "by": "simplyconnected"}, {"item_id": 21084341, "text": "More recipes than idioms.", "by": "hota_mazi"}, {"item_id": 21080868, "text": "Reinventing the wheel is a good idea. It&#x27;s how you learn. Programmers who say &quot;don&#x27;t reinvent the wheel&quot; don&#x27;t understand how the craft of wheel making works.", "by": "programminggeek"}, {"item_id": 21081011, "text": null, "by": null}, {"item_id": 21082780, "text": "i like looking at how other languages do things. i&#x27;m pushed away from Go and pulled toward Rust, the two languages i&#x27;ve been thinking of getting deep into. like the currying example. that move keyword seems pretty nice.", "by": "stOneskull"}, {"item_id": 21081299, "text": "substring for c++ and other languages needs an j-i+1.", "by": "tmsh"}, {"item_id": 21080798, "text": "Would be great for the hoards of &quot;self taught&quot; programmers out there, who bluntly refuse to understand patterns (design or programming).", "by": "trampoliner"}]