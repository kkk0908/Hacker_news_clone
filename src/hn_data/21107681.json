[{"item_id": 21107938, "text": "If you like this kind of thing I suggest watching Ben Eater on YouTube or his website.<p>Ben explains and builds basic computers from components. It&#x27;s more to see how things work like registers and memory addresses. It&#x27;s a nice mix of electronics and computer science.<p><a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCS0N5baNlQWJCUrhCEo8WlA\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCS0N5baNlQWJCUrhCEo8WlA</a><p><a href=\"https:&#x2F;&#x2F;eater.net&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;eater.net&#x2F;</a>", "by": "dghughes"}, {"item_id": 21108862, "text": "Back when I was a CPU logic designer, I worked on two machines that used ECL logic, where the basic building-block gate was a 4-input OR&#x2F;NOR (the gate produced both phases at output). I recall that on one of these machines, each logic card was supplied with well over 100A on the -4.5 supply, we had a space budget of 98 cards. But the tough limit to hit was cooling.  For the entire CPU we had only a single 20 BTU-ton water chiller, and had to sneak everything in under the cooling limit.", "by": "dbcurtis"}, {"item_id": 21108774, "text": "I was impressed to learn that when Margaret Hamilton programmed this machine, she wrote an interpreter, and coded the  mission logic in the interpreted language. So, in a sense, it really was microcoded; but the microcode was what looks like the real instruction set, and the instructions actually used lived in ROM.<p>The Xerox Alto, which was used for the original Smalltalk in 1972, also worked much this way: It had 16 program counters, one of which pointed to a program for interpreting Alto instructions. Other program counters were for refreshing the screen, operating the disk, driving the laser printer, and moving network packets. An interrupt just changed which program counter instructions came from.<p>The Smalltalk runtime was another interpreter, interpreted by Alto (interpreted) instructions. People complained about how slow Altos were, no surprise.<p>I might have misremembered some of the details above. Corrections welcome.", "by": "ncmncm"}, {"item_id": 21108662, "text": "Back in the 1990s, UC Berkeley&#x27;s computer hardware quals exam used to require the test taker to design a microcoded RISC processor out of NAND gates, from the bottom up.  It was kind of like Little Alchemy, once you created every kind of primitive gate you needed, you could assemble them to make larger and larger things. This included building latches, registers, static RAM, bottom to top.  NOR is just NAND with 0&#x27;s and 1&#x27;s reversed.", "by": "not2b"}, {"item_id": 21109049, "text": "NOR was used instead of NAND because the latter would&#x27;ve required a series connection of transistors, which changes the voltage levels needed and otherwise complicates the design.", "by": "userbinator"}, {"item_id": 21110942, "text": "NOR gate logic, like NAND and NOT&#x2F;AND&#x2F;OR gate logic, are functionally-complete.<p>Combinational logic examples:<p>- NOT gate -&gt; N-input (N &gt;= 1) NOR with all inputs tied together to the input<p>- N-input OR gate -&gt; N-input NOR gate with a NOT gate at the output<p>- N-input AND gate -&gt; N-input NOR gate with a NOT gate in front of each input<p>- Bonus - sequential logic: S-R latch -&gt; 2x 2-input NOR gates with one each of their inputs tied to the other gate&#x27;s output", "by": "anon91831837"}, {"item_id": 21110729, "text": "Why three inputs?", "by": "angel_j"}]