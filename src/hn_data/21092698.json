[{"item_id": 21093034, "text": "This is one of my favorite books(-in-progress) to follow along with.  If you&#x27;ve ever even had a passing curiosity in how interpreters work, I highly recommend checking it out from the beginning: <a href=\"http:&#x2F;&#x2F;craftinginterpreters.com&#x2F;welcome.html\" rel=\"nofollow\">http:&#x2F;&#x2F;craftinginterpreters.com&#x2F;welcome.html</a><p>The writing is charming and approachable, while still packed with an impressive amount of knowledge.", "by": "rhencke"}, {"item_id": 21093338, "text": "The implementation described here is inspired by Lua. Even if you already know what a closure is, it might still be a worthwile read, since it probably implements them very differently from what you are thinking!<p>Instead of always heap-allocating variables that are used by closures, it starts by stack-allocating them and only moves them to the heap if the closure outlives its parent function. In order for this to work, the inner function always accesses the outer variables through an indirection (upvalue).<p>The main advantage of this approach is that it is compatible with a single-pass compiler, without sacrificing performance in the common case where closures are not present. Since the generated code for using a variable is the same no matter whether it is used by inner functions or not, the compiler can start emitting code as soon as it sees the variable declaration, without needing to look ahead to find where the variables are going to be used.", "by": "ufo"}, {"item_id": 21093510, "text": "Author here! Happy to answer questions, accept criticism, etc. :)", "by": "munificent"}, {"item_id": 21094597, "text": "Tiny question about lox : does it support arrays ? I understand it might not be that interesting as a concept so its removed from the example language to keep it smaller, but I was wondering if I missed anything ? If not, how would those be declared or implemented ?", "by": "makapuf"}, {"item_id": 21095662, "text": "So, there&#x27;s one thing here that strikes me as really weird.  And I think it&#x27;s best summed up at the end, where it discusses closing over a loop variable.<p>It discusses how if you close over a loop variable, people expect that each function created will get a different value of the variable, even though there&#x27;s only one variable, and closures close over variables, not values.  It treats this as a special case.  But to my mind this isn&#x27;t a special case; it just highlights that having closures close over variables rather than values is, well, not right.  Like, if I write, to use some sort of pseudocode,<p><pre><code>  x = 1;\n  f = function() { print(x) };\n  x = 2;\n  g = function() { print(x) };\n</code></pre>\n...then I expect that f will print 1 and g will print 2.  Because, well, I&#x27;m coming in from lambda calculus and Haskell where everything is values.  Of course, there this problem doesn&#x27;t come up because there&#x27;s no mutability -- but that&#x27;s still how I&#x27;d expect things to work once you introduce it.  Closing over <i>variables</i> just seems horribly counterintuitive to me.<p>This came up earlier, too, when the was going through all the machinery with upvalues, and I was just like, why doesn&#x27;t it just copy in the values?  And after reading further, it&#x27;s like, oh, it&#x27;s because they want to be able to modify the variable outside the function!  Which, like, whoa.<p>Like obviously what I said above about how I expect closures to work isn&#x27;t workable if you want to be able to mutate the closed-over variables, outside the closure, from inside the closure.  But maybe that just shouldn&#x27;t be allowed?  I think if I were writing a language from scratch, and it included lambdas, they&#x27;d close over values, not variables, and mutating the closed-over variables would have no effect on the world outside the closure (or perhaps be disallowed entirely).<p>So, basically... are you sure that people expect that behavior with loop variables because they are thinking of each iteration as a new variable?  Or is it because they don&#x27;t expect closures to close over variables at all, but rather values, and would be surprised that loop variables are being treated as a special case rather than closures just always working that way?  Because in my case it&#x27;s definitely the latter.", "by": "Sniffnoy"}, {"item_id": 21093665, "text": "Small piece of ui&#x2F;ux feedback. It would be awesome if you moved the next and previous buttons to a static position so I can quickly page through the book. Right now they hop up and down.", "by": "_virtu"}, {"item_id": 21094323, "text": "I am recently working on a \nhobby programming language: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;rust-shell-script&#x2F;rust-shell-script\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;rust-shell-script&#x2F;rust-shell-script</a>, which could compile to either rust code or shell script. This book helps me clarified a lot of things along the implementation.", "by": "rustshellscript"}, {"item_id": 21094926, "text": "This was a great time for this to be posted. I&#x27;ve been spending a lot of time with Racket, and closures are a big part of that. I believe (though maybe I&#x27;m wrong) that Racket&#x27;s closures don&#x27;t have the issue described in this chapter of closing over values vs. variables due to the functional nature of the language.", "by": "333c"}, {"item_id": 21098697, "text": "Are there any advantages or disadvantages with learning how to build an interpreter versus learning how to build a compiler? I&#x27;m asking since I will be taking a compiler class in college soon and this book looks really interesting to me. Usually I see school curriculums have a class on compilers instead of interpreters.", "by": "emthaw"}, {"item_id": 21093544, "text": "Does anyone know of any similar material that helps you create a database &#x2F; distributed database from scratch?", "by": "qazxswedcvfr"}, {"item_id": 21093601, "text": "As someone with a  bit of a Lua background, reading an example with a local variable named `local` makes my head hurt :)", "by": "ufo"}]