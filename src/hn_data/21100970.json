[{"item_id": 21104194, "text": "Over the last 10 years, I&#x27;ve become convinced the idealized notion of DevOps is not a thing. I have a couple reasons:<p>1. There is a huge sysadmin workforce. Many of them never learned to really code. Are these people supposed to go away? Are they supposed to learn to code? Coding is a skill that takes time to master, and if these people were sufficiently motivated to code, they probably would&#x27;ve become coders before now.<p>2. In general, software engineers aren&#x27;t thinking about or care about their CI&#x2F;CD pipeline beyond it being easy to work with. They don&#x27;t care about their infrastructure except insofar as what they need to know to make their stuff fast. There is a nice separation of concerns there that&#x27;s nearly impossible to avoid. As a result, it&#x27;s very easy to build higher order tools to handle most workflows and infrastructure. It&#x27;s the whole reason AWS can exist and why most devs don&#x27;t care about the details of ops.<p>I realize I&#x27;m speaking in very broad terms. However, broad terms are what define an industry. I&#x27;ve seen this play out enough times that I knew what this article was going to be about before I even clicked on it. I&#x27;m pretty sure most other people did, too.", "by": "madrox"}, {"item_id": 21102646, "text": "This is sadly the state of the current mainstream DevOps &quot;movement&quot;. It is no longer anything that could be described as a movement, only as an industry, a set of tools, and a thing a few years back that CTOs in laggard companies announce to the board that they need to be doing.<p>It was supposed to be about efficiency and repeatability, and approaching ops with a SWE mindset; but most importantly taking ownership of your shit, end-to-end; which is something that the best and most effective SysAdmins and Software Engineers always did.<p>We don&#x27;t hire &quot;DevOps Engineers&quot;, rather &quot;Platform Engineers&quot;, in which we have a hard requirement that you are approaching competence as a software engineer in at least one language, and in at least one paradigm (e.g you should be able to tell me about type systems, data structures, polymorphism, higher order functions, composition vs inheritance, referential transparency, TDD etc).<p>We also expect that all of our backend software engineers deploy and maintain their own infra (as code), using the guardrails&#x2F;services&#x2F;systems provided by our platform team. Deploying a new database cluster for a user-facing service is a pull request from a backend engineer, not a Jira ticket for a &quot;DevOps Engineer&quot;<p>There are companies out there &quot;doing it right&quot;, but they are in the minority.", "by": "darkr"}, {"item_id": 21101321, "text": "&gt; The most common job title seemed to be SRE (Site Reliability Engineer), although there was a long tail, and they don\u2019t care much about job titles.<p>Oh I like that one. &quot;I kept the pile of shit running and put the fires out before they were noticed&quot; is too long to put on a business card, anyway. &quot;Site Reliability Engineer&quot; sounds almost tame.", "by": "h2odragon"}, {"item_id": 21101571, "text": "I recently transferred as a developer to a development operations role at a medium-sized company. This article exactly describes my experience - the main focus of the ops team seems to be on build, deployment and monitoring technologies focused on a migration towards containerization running on AWS.<p>Code and tooling is built on a &quot;what works&quot; basis and no particular attention seems to be paid to the overall design of the software or testing (likely due to a real or perceived lack of time). On-call rotations (and how to eliminate work for them) is the hot button discussion topic.<p>The #1 question I get asked by the developers is &quot;Did you <i>really</i> want to transfer from development to ops?&quot; which me think that a lot of developers look down on operations roles and see it as a demotion. I find that quite odd given that 1) ops keeps the product up and the money coming in with relatively little headcount and 2) most of the people working on our ops teams have a formal education in software engineering.", "by": "porpoisemonkey"}, {"item_id": 21101646, "text": "&gt; DevOps means the veteran admins had to check in their personal scripts<p>Oh my, this is an epiphany.<p>I don&#x27;t even know what DevOps means. But if the implication was that the &quot;veteran admin&quot; was making arbitrary state changes and is now forced by DevOps to document it in the commit history, I am firmly in favor of whatever DevOps is.", "by": "jancsika"}, {"item_id": 21101695, "text": "&gt; Everyone hates YAML. Everyone writes a lot of YAML.<p>I don\u2019t know a single engineer (ops or not) who enjoys writing YAML, yet it is utterly unavoidable.<p>I\u2019ve lost count of the amount of bugs and broken deploys that have happened because of YAML, or because of a type error caused by it.", "by": "ljm"}, {"item_id": 21105091, "text": "I am a solutions architect at Red Hat but I came from being an application architect. I recently gave a talk on cqrs and event sourcing at a midwest user group. I am routinely surprised how few &quot;DevOps&quot; engineers care to grasp application architecture yet want to start dabbling in things like Kubernetes. Automation using Ansible, yes, no problems there. Creating microservice architectures using containers and kubernetes tooling is yet a ways out for many. New tooling is absolutely necessary to implement the things we have all been talking about for at least 10 years. Developers can no longer just care about writing code. They have to think about how to manage breaking up their monolith, not just for performance; that&#x27;s not typically the driving force behind adopting microservice architectures. It&#x27;s about improving lead time and reducing the batch size of releases. You can&#x27;t have microservice architectures without both sides(dev and ops) understanding what each actually do. I have first hand knowledge how difficult it still is to break those silos down. Developers, if you still think writing code is the hard part; well, I&#x27;ve got news for you. Ok, writing good code is still hard but there&#x27;s a lot more to think about to get the most out of that code when it goes to production. As a starting point to answer &quot;why do any of this?&quot; I recommend the book &quot;Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations&quot;.", "by": "dpeterson"}, {"item_id": 21106325, "text": "I\u2019ve started my career very early on on the age of 16 as a system admin. Heart and soul was on pure engineering and less on what people label these things on CVs.<p>A few years later I moved up the stack into a full time programmer and been doing that ever since 20 years down the line.<p>I have built systems from the ground up literally, loading the van with the equipment, installing the racks, the servers, the EMC\u2019s ...<p>Having seen it from all perspectives, sys admin, DBA, Ops and all it\u2019s variants and a programmer. I\u2019d like to think of my self as an engineer who solve problems or build things to solve problems.<p>The tools that you use does not define you. I have seen and still seeing loads of people Devs who don\u2019t understand or willing to understand how ops work Or how the crap they produce runs and get maintained.<p>And ops who write hacky code in the name of infra as code.<p>I wish we can just be Engineers and stop labelling and define people by the tools they use. Things will be better IMO", "by": "hackerm0nkey"}, {"item_id": 21101507, "text": "&gt; Being a gathering of system administrators I\u2019d expected more IRC, there was no mention of it.<p>We just don&#x27;t tell you about it -- Slack is more visible to management, and thus infosec has made slackbots a fucking integration nightmare.", "by": "jldugger"}, {"item_id": 21101768, "text": "&gt; <i>As a result they also talk about mental health more than programmers do.</i><p>It really is. All of the lifelong DevOps&#x2F;sre people I know have spent time grappling with the consequences of this.  On all experiences also seem so much more dramatically in larger companies where teams can properly load balance.", "by": "dev_dull"}, {"item_id": 21101684, "text": "been in an ops role for 2.5 years, 2 years as software dev and currently i&#x27;m in a devops role for 2.5 years now.\nthis article hits the nail on the head. this was nothing more than a rebranding of the word ops. it has very little to do with actual software development. \nnot to say that i don&#x27;t enjoy it, for the better part of the time i was a software dev, i really missed setting up machines and day to day network&#x2F;system administrator work. i know my way around 4-5 programming languages so i&#x27;d say if the need arises i can use the right tool for the right job. \nhowever, kubernetes, aws, terraform, packer, ansible, bash, etc are everyday things. i&#x27;d say in the last years i&#x27;ve developed a love hate relationship with pretty much every tool out there (looking at you terraform and k8s).\nthe pitfall with this position is that there&#x27;s a lot of buzzwords flying around and 9&#x2F;10 and if you have some idiotic management you end up implementing some overkill solution to fix your problems.\nthe other pitfall, from an infrastructure perspective, is that the ecosystem around kubernetes is so big that there are now an insane number of moving parts that you need to maintain and monitor.", "by": "pi-victor"}, {"item_id": 21107293, "text": "I find this article to be a little frustrating. It is kind of like a layperson going to a mechanic convention and saying &quot;all I heard about was engines, brakes and tires. Everyone is interested in tires&quot;.<p>If you are not in the domain, then you will not understand why the &#x27;devops&#x27; engineers are all looking at these things. Kudos to the developer for going to the conference and learning something new.<p>Devops are exactly the same as Software Engineers. There are those people that just slap code together and do not care about design, tests or the longevity of the product. Devops can be the same where they just push the button in AWS, create some bash scripts and get things running.<p>Then you have those Devops that approach building product and infrastructure in a repeatable, scalable, traceable fashion. They care about software engineering practices and  building something to last.<p>I work as something in between a platform engineer and ops. I run 4 kubernetes clusters in GCP, had to build up all the underlying resources (dbs, service accounts, storage, clusters) and get the product running on it. I use terraform for this, including kubernetes deployments, and it works quite well.<p>Just like software engineers, devops&#x2F;ops is under time constraints and have to hack things together. Whatever it takes to keep the business running...", "by": "cbushko"}, {"item_id": 21101546, "text": "&gt; DevOps is Ops with new tools... I did not meet or hear from any developers.<p>This is awful! It&#x27;s not DevOps, it&#x27;s an old infra gathering! Very disappointing.<p>I expected devops conference to have devs ONLY. Devs that that are curious and passionate about whole product life cycle, hardware, scalability, deployments and networks, devs who also pulled and transformed&#x2F;transitioned their ops friends into devs.<p>Is it a general trend with DevOps or just devopsdays Portland conference thing? Is it cargo-culting?", "by": "rinchik"}, {"item_id": 21102742, "text": "For me the meaning of DevOps has shifted from &quot;developers and operations working together&quot; to &quot;operations picking up developer tooling&quot;. As more and more administrators become familiar with the new workflow I expect them to transition from mostly relying on manual testing and scheduled drills to writing automated tests for infrastructure fail-over, backups, firewalls, etc.<p>I&#x27;m not a big fan of YAML the format but I&#x27;ll gladly put up with it for the valuable content that&#x27;s encoded in those files - the entire system described in a transparent accessible manner at an abstraction level which enables the developer, the network guy, the server guy, the storage guy, the architect and the security guy to have a meaningful conversation.", "by": "tofflos"}, {"item_id": 21102596, "text": "From the article:<p><i>DevOps is Ops with new tools. I went to DevOpsDays thinking DevOps means developers and operations merged into one team. I was wrong.</i><p><i>I did not meet or hear from any developers. It was a gathering of system administrators who use version control, and write a lot of YAML. Programming languages were not a topic...</i><p><i>DevOps means the veteran admins had to check in their personal scripts, and everyone is expected to automate more things. They relate to the software their business runs (\u201capp\u201d, \u201casset\u201d) the way a merchant-navy captain relates to what\u2019s in the containers on his ship.</i><p>Ah. This must be DevOps for big shops. Not &quot;why are we paying operators when we could have the developers do it?&quot;", "by": "Animats"}, {"item_id": 21103020, "text": "I&#x27;m an organizer for one of the (many) DevOpsDays Conferences held around the world. Speaking only for myself, I struggle with making sure that DevOps is about Dev and Ops working together, not just Ops &#x2F; SysAdmins using a different, more marketable job title. When Operations Engineers become DevOps Engineers, it subconsciously says to Developers that they don&#x27;t belong.<p>I&#x27;d encourage all of you that feel excluded, or feel like these are just SysAdmin conferences in sheeps clothing, to go to your local DevOps Meetup and start there. Demand that DevOps continues to stand for a community and cultural way of making software development suck less and not just &quot;the next Agile&quot;. &#x2F;rant over", "by": "retr0grad3"}, {"item_id": 21101453, "text": "&quot;everyone hates yaml&quot; hah.  Shocking how we&#x27;re stuck on these problems.<p>The old line about &quot;the problem that it solves is not hard and it does not solve them well&quot; about XML is kind of hilarious when we&#x27;re still facing the same thing about its current popular replacements - JSON and YAML.", "by": "Pxtl"}, {"item_id": 21107869, "text": "A question to ponder: is devops a niche created by developers who can&#x27;t sysadmin, or sysadmins who can&#x27;t code?<p>\u201cA human being should be able to change a diaper, plan an invasion, butcher a hog, conn a ship, design a building, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects.\u201d", "by": "readme"}, {"item_id": 21104849, "text": "Its hilarious to read Developers and Operations guys bash each other with DevOps.<p>DevOps is about getting those two groups in harmony where they compliment each other.<p>Nothing else.", "by": "geggam"}, {"item_id": 21105743, "text": "I\u2019ve always \u201cautomated stuff away\u201d and worried about making sure whatever I developed had a sane, reproducible way of a) being tested and b) being deployable at scale, so I\u2019ve watched DevOps&#x2F;SRE unfold as I hopped between both sides of the fence (I\u2019m a Solution Architect at Microsoft now, and spent a few decades in telcos doing the above).<p>I\u2019m going to be (intentionally) critical here, but please understand that these are examples taken from a biased sample (I work in Portugal with very traditional enterprise customers and early stage startups, either of which usually lack-or don\u2019t care about-senior talent - juniors of all stripes tend to be over-enthusiastic about jargon and bleeding edge, and the blast radius is huge on both kinds of companies).<p>The way I see it (in both enterprise and the local startups I deal with) is that DevOps has created as much confusion and undue ceremony as Agile in many places, all of which share a common trait\u2014developers there do not understand (or want to deal) with software architecture and just want to hit their sprint targets without reasoning about the architectural impact of implementation details.<p>Enterprise devs will usually not have any real control about architecture, internal endpoints or even dev environments (all the Ops is taken away from them) and startup devs are usually rushing things, setting up faster infra to fix code problems and building up technical debt _in architecture terms_ (the Ops stuff is usually haphazard and too bleeding edge).<p>There are some positive exceptions, though. I\u2019m currently helping a customer do Kubernetes from a _governance_ perspective (i.e., figuring out all the steps from dev to prod including environments, namespaces, network policy groups, etc.), and even though this is being done alongside already existing deployments, _taking the time to plan and work things out inside your org_ makes a lot of difference.<p>We\u2019re not calling it DevOps, SRE, or Agile. It\u2019s not a buzzword-laden, Valley-anointed process. It\u2019s just (senior) engineers (Devs and Ops) talking and systematically going through what will work and won\u2019t...", "by": "rcarmo"}, {"item_id": 21106786, "text": "DevOps is about collaboration between devs and ops towards building software and operating it efficiently to meet business needs. Traditionally building and operating were looked very differently but experience has taught us that features and stability cannot be achieved without understanding of how features were built and what needs to be done to run those features in production efficiently. In an ideal world, the same person should be able to build and operate systems in production however we don&#x27;t live in an ideal world - traditionally there was a big divide between devs and ops, and in complex environments you can&#x27;t learn to do everything yourself. Hence... DevOps.<p>There are multiple ways this can be achieved. This article is a good read to understand different models of implementation of DevOps culture - <a href=\"https:&#x2F;&#x2F;web.devopstopologies.com&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;web.devopstopologies.com&#x2F;</a><p>&quot;DevOps is Ops with new tools. I went to DevOpsDays thinking DevOps means developers and operations merged into one team. I was wrong.&quot; - This is kind of right but not completely. DevOps is about bringing ops closer to dev teams by either merging ops or retraining devs to be able to be better at ops (there are more ways as indicated in the above article about DevOps topologies). The idea of doing ops with new tools is that these new tools help us with doing ops like we are building software. Many software development best practices, abstractions, architectures can be now applied to ops as well. This shift in doing ops with these tools which are a lot like other software development tools enable ops to come closer to devs and vice-verse. Here is a great talk by Mitchell Hashimoto (the creator of Terraform, Packer, Vagrant, Vault, etc.) that got me into DevOps - <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=UTQQggVx4sI\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=UTQQggVx4sI</a>. This talk explains the use of tools with the backdrop of DevOps.<p>Other than these two things, your observation was spot on. I was not at the event but that&#x27;s the story at most DevOps events.<p>I think software architecture will soon become an area of focus in DevOps circles as the right architecture also essential for achieving CI&#x2F;CD, agility and DevOps.<p>Never the less, welcome to the world of DevOps. :)", "by": "vaidik"}, {"item_id": 21101910, "text": "&gt; The most common job title seemed to be SRE (Site Reliability Engineer)<p>This article (plus the comments) kind of scares me because I am a CS student who just received an opportunity to work as an SRE Intern at a pretty big company over the next summer break. I took it because I wanted to find out whether SRE is a role for me but I am a bit worried that if I accept a more permanent SRE role after the internship, will it hurt my chances of moving to dev role later in my career.", "by": "aswinmprabhu"}, {"item_id": 21106120, "text": "&gt; DevOps is Ops with new tools. I went to DevOpsDays thinking DevOps means developers and operations merged into one team. I was wrong.<p>Nope, he was right. DevOps is all and only about removing the wall between Dev and Ops. That might go as far as merging the team, but not necessarily.<p>However, the conference is _dead wrong_ is they convey the feeling that &quot;DevOps is Ops with new tools&quot;. That&#x27;s akin to putting lipstick on a pig, and does DevOps as an organization tool a lot of wrong (just like Agile, etc.).", "by": "nfrankel"}, {"item_id": 21106326, "text": "As a lazy developer I enjoy DevOps principles. First time I don&#x27;t have infrastructure issues. My code builds and deploys automagically and sys-admins can focus on important stuff.<p>I&#x27;d also like to describe it as just another tool in my toolbox. Created by admins for developers. I don&#x27;t mind YAML at all. It&#x27;s better than JSON or XML and it&#x27;s a first class citizen in Go, Python, JS and other languages.", "by": "ragerino"}, {"item_id": 21105203, "text": "The DevOps movement petered out because it solved most of it&#x27;s technical problems with tools that have become industry standards.<p>As a sysadmin, you used to have to write scripts to solve EVERYTHING.  Especially since tooling for ops people in the 2000s was a load of hot garbage.  A lot of tools back then had GUIs, which weren&#x27;t automation friendly.<p>Nowadays most ops problems have some easily automatable tool, which I think gives less incentive for sysadmins to reach for a programming language.", "by": "BiggieCheese"}, {"item_id": 21102756, "text": "Can anybody give me a reason why containers are popular for production deployments (NOT referring to K8 use-cases)? As a development workflow they&#x27;re amazing - but cheap cloud based VPSs + Ansible&#x2F;Puppet work really nice. Why would you add another layer of abstraction in there when all it does is hinder performance?", "by": "beardedman"}, {"item_id": 21102528, "text": "I&#x27;ve been on both sides of that fence for 13 years now (currently in a really nice dev job.).<p>To me it seems like things are getting better. Often devs and ops are the same kind of people only on different teams, or even embedded in the teams. Nobody is hiding anything and people are working together if stuff breaks.", "by": "eitland"}, {"item_id": 21101570, "text": "&gt;&gt; Many were curious about service-meshes (basically a smart network proxy?) such as Istio or Linkerd, but almost none were using one.<p>Going to blame Ubuntu&#x27;s psychological priming via ads in their MOTD for this one", "by": "kylek"}, {"item_id": 21101869, "text": "Spot on.  And totally depressing. Apps as black boxes.  Ugh.", "by": "rachelbythebay"}, {"item_id": 21105061, "text": "It occurs to me that DevOps is Plato&#x27;s Cave. So many people think they know what DevOps is, yet all they really know is what they&#x27;ve always been familiar with, and they can only interpret it based on that. It&#x27;s kind of depressing.", "by": "peterwwillis"}, {"item_id": 21103275, "text": "You have a monolith. The monolith is deployed by a grumpy old admin using a shell script. He monitors it with another shell script. This is the old, bad way of doing things. Monoliths are bad because they are the kind of thing only neolithic cavemen would care about.\nSo you break up the monolith into micro-services. Of course, you use (other) services to provision and monitor your new micro-services. You now have dozens of tools and scripts and configuration files. This is, naturally, the modern way of doings things. If tomorrow morning, your 500 customers suddenly become 3 million customers, you can just flip a switch and scale on demand in the cloud!\nSoon you&#x27;ll be so successful that you can even hire an entire team to look after your new non-monolithic system.", "by": "pnako"}, {"item_id": 21102030, "text": null, "by": null}, {"item_id": 21101444, "text": "I can imagine it the other way round: &quot;hey have you tried that new javascript framework? It only came out last week, it&#x27;s pre-alpha but I already have it running in production. What? No, not a problem, I just chuck it over to ops and they keep it running&quot;.", "by": "goatinaboat"}]