[{"item_id": 21106397, "text": "I love that this focuses on event modeling as opposed to CQRS &#x2F; Event Sourcing specifically.<p>Those patterns are useful (CQRS and ES), and they imply a certain design,  but event modeling and domain driven design are what really tie systems together.<p>One thing I&#x27;m not sure I entirely agree with though is the flat cost  of change. We&#x27;ve been working on an event modeled system for about 4 years now.  It has grown in complexity and we&#x27;ve learnt a lot and we&#x27;ve invested a lot.<p>At this point we are probably approaching a flat cost, but initially our cost increased quicker than a traditional project.<p>There are a lot of pitfalls and learnings about building a system this way. Building read models gets very tiresome, and dealing with concurrency and idempotency are still hard (you just have a better tools &#x2F; language for dealing with them).<p>Having that, once you break the back of this and build the internal skills, it is a great way to work and I  really believe the systems will scale much more easily (both in performance and feature capacity). It&#x27;s worth  realising the effort to get there is substantial tough.", "by": "healsjnr1"}, {"item_id": 21106198, "text": "Event modeling and domain driven design go hand-in-hand, and learning both was a huge turning point in my development career. It helps align software to the business, and technical to non technical staff in a way where everyone speaks the same ubiquitous language (when a user registers) more than other approaches (rest - when I POST a user, crud - when I create a user).<p>It took me a few books and a couple of projects before the penny dropped, but now everything else seems disorganised and difficult to keep a lid on complexity as projects grow.<p>If your in Nodejs&#x2F;typescript land and wanting to get started with DDD and eventing like the article, there&#x27;s:<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;node-ts&#x2F;ddd\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;node-ts&#x2F;ddd</a> - basics for domain modelling, read&#x2F;write repositories, aggregates&#x2F;roots<p><a href=\"https:&#x2F;&#x2F;node-ts.github.io&#x2F;bus&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;node-ts.github.io&#x2F;bus&#x2F;</a> - event&#x2F;command service bus, supports workflows&#x2F;sagas, queue technology agnostic (runs over sqs, rabbitmq etc)", "by": "redact207"}, {"item_id": 21107219, "text": "See, this looks very logical, and a &quot;command based UI&quot; is great.<p>But the diagram is missing _all_ the complex steps, that makes this type of system a lot of work to build and maintain. You need to be able to cancel. You need to be able to extend bookings, or change the room type. Sometimes, this will incur a fee, and sometimes not.<p>In my experience (not from hotel systems), the operators _will need_ a way to actually edit the full state of the bookings. A registration form and a read-only &#x27;booking view&#x27; will not cut it.<p>I think it&#x27;s a good idea to keep the &quot;command-based UI&quot; going for external&#x2F;end-users though.", "by": "gnud"}, {"item_id": 21106988, "text": "I feel like Rich Hickey, Clojure and Datomic deserve to be mentioned here; given the amount of effort he&#x27;s gone through to communicate these ideas and provide neat tools to make them easier to implement.", "by": "codr7"}, {"item_id": 21107971, "text": "&gt; The biggest impact of using Event Modeling is the flat cost curve of the average feature cost. This is due to the fact that the effort of building each workflow step is not impacted by the development of other workflows.<p>Was this written by a programmer? It seems someone is living on fantasy theory island.", "by": "koonsolo"}, {"item_id": 21107758, "text": "This paper&#x2F;approach is reminiscent of &quot;Enterprise Integration Patterns&quot;[0] use of messaging.  As others have noted, this architectural approach can be quite powerful and allow for system evolution.<p>Event Modelling, as described by the post, goes beyond EIP by taking a component approach into the UI though.  A good thing IMHO.<p>0 - <a href=\"https:&#x2F;&#x2F;camel.apache.org&#x2F;manual&#x2F;latest&#x2F;enterprise-integration-patterns.html\" rel=\"nofollow\">https:&#x2F;&#x2F;camel.apache.org&#x2F;manual&#x2F;latest&#x2F;enterprise-integratio...</a>", "by": "AdieuToLogic"}, {"item_id": 21106248, "text": "It&#x27;s funny how server-side and client-side architecture moves almost entirely hand-in-hand. Going by how we talk about things you&#x27;d think these&#x27;d be entirely different.<p>- The Model-view-controller architecture was moved to the server-side by ROR and its descendants.<p>- The javascript eventing model that was suitable for non-blocking UIs being moved server-side via Node.js.<p>- Now we&#x27;re now also aligning around event&#x2F;command-driven models for &quot;state-management&quot; (Redux, event-sourcing&#x2F;CQRS).<p>- Event-streams like Rx.js being briefly hyped, but not gaining too much adoption (?) both for GUIs and servers.<p>It&#x27;s nice to see that general programming principles are still applicable across domains.", "by": "alipang"}, {"item_id": 21107922, "text": "Event-driven systems are great. They\u2019re not for everything, and oftentimes when you\u2019re first introduced to, and start thinking in events, you might notice a tendency to start seeing all problems as a nail with a big hammer in your hand. That being said, it\u2019s a fantastic approach to exercise and keep in your toolbox for the situations where it can help.", "by": "whalesalad"}, {"item_id": 21106538, "text": "Thought provoking and it&#x27;s be interesting to try out on a project. There were some hand wavy sentences around legacy systems:<p>&quot;With proper buy-in, the organization can agree to not alter the existing system. Instead, dealing with bugs and adding new functionality is done on the side as a side-car solution.&quot;<p>But I understand their point. Kinda like strangling the monolith--sometimes the best way forward is to start over.<p>Has anyone actually done this and seen the flat cost curve? I worry that the components will be entirely independent in theory, but not in practice.", "by": "mooreds"}, {"item_id": 21107743, "text": "Anyone know what tool was using to generate these diagrams?", "by": "GordonS"}]