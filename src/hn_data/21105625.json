[{"item_id": 21106936, "text": "A few minor things missing in OP (mostly CJK related)<p>- Code point is sometimes not enough to determine the glyph. For example, U+5199 must look different in Simplified Chinese and Japanese. Typically this is handled by using different fonts, but more formally it should be marked with different lang attributes (in case of HTML).<p>- Top-to-bottom writing mode is still pretty much in use in Japanese. HTML support is poor, but it&#x27;s common in PDF. Caveat: Latin alphabets are rotated by 90 degree (as explained in OP), but for punctuations, simply rotating the glyph isn&#x27;t enough because the center line is going to be slightly off. You need special glyphs for rotated punctuation.<p>- Unlike Latin scripts, most Chinese and Japanese characters are free to break line at any point, but there are exceptions: contracted letters (e.g. \u3061\u3087\u3063) cannot be split. So you&#x27;ll end up with treating each letter as a separate word. (Contracted letters are treated as one word.)", "by": "euske"}, {"item_id": 21105989, "text": "Another pain point on text AA: Many renderers mix up colorspaces on antialiasing. For example freetype assumes a linear colorspace when calculating the antialiased bitmap but AFAIK both GTK and QT apply it directly on sRGB without any adjusting. The result is apparently thickened fonts when displayed black on white and thinned fonts when displayed white on black.<p>Edit: Some background can be read on [0].<p>[0] <a href=\"https:&#x2F;&#x2F;www.freetype.org&#x2F;freetype2&#x2F;docs&#x2F;text-rendering-general.html#background\" rel=\"nofollow\">https:&#x2F;&#x2F;www.freetype.org&#x2F;freetype2&#x2F;docs&#x2F;text-rendering-gener...</a>", "by": "leni536"}, {"item_id": 21110248, "text": "The other comments about the details rendering are great and an example of how much depth of knowledge you can find on HN (and all this is now well beyond my experience).<p>What I&#x27;d be curious about here, though, is what this says about large scale software engineering. Text rendering has to be one of the most common activities within a large number of computer program sorts and I know pieces of the text rendering process are common examples in texts on object oriented programming, indeed the different of rendering processes seem to suggest objects and interface readily. Yet the standard pipleline the author describes seems leakier than anything I saw twenty years when I dealt with such issues - nothing is solved on the software engineering side, the mess just grows.<p>Obviously, this is a product of adding new languages and new display models to the text rendering process, as well as standardizing the process so it accommodated different font approaches and etc.<p>But object orientation as well as related models promised, some time in the past, something akin to &quot;encapsulate the process and adding complexity will be easier&quot;. Object oriented programming has lost almost all luster but what alternatives? Could the pipeline be less leaky in functional programming or something similar or something different.<p>It just makes me curious.", "by": "joe_the_user"}, {"item_id": 21106747, "text": "&gt; Mercifully, subpixel has become less relevant over the years: retina displays really don&#x27;t need it, and the subpixel layout on phones, prevents the trick from working (without major work). On newer versions of macos, subpixel-aa of text is disabled at the OS level by default.<p>Speaking of mercy, I wish Apple had disabled it only on hidpi displays and chosen a longer deprecation window for normal displays.<p>I prefer keeping displays at a distance slightly longer than my arm. This completely hides the slight blur of subpixel antialiasing.<p>Now a 1440p has significantly degraded text rendering (even though other graphics look great) and if you want to use an external display, it must be 4K or 5K to not get a blurry, thin mess.", "by": "dictum"}, {"item_id": 21106078, "text": "High-DPI (namely 200+ DPI, aka Retina) text rendering on desktop computers is one of the more impactful hardware developments for programmers in a while.<p>When you&#x27;re looking at text all day every day, having every single glyph take a massive step up in fidelity (4x the pixel budget!) is not to be sneezed at.", "by": "frou_dh"}, {"item_id": 21106569, "text": "If it weren&#x27;t for Windows, we could move on from TrueType outlines (.ttf) to CFF outlines (.otf). .otf works nicely on non-Microsoft rasterizers. It was terrible on XP. Now on Windows 10 it\u2019s less terrible, but .otf fonts on Windows 10 using DirectWrite look bolder and blurrier than using FreeType, Apple, or Adobe rasterizers.<p>If Microsoft adopted the Mac font rendering aesthetic and fixed their CFF rasterizer, we wouldn&#x27;t need to worry about TrueType hinting anymore. But now, since your PDFs and Web fonts get viewed on Windows, you need to use TrueType outlines with Windows-friendly hinting even if you aren&#x27;t using Windows yourself.", "by": "hsivonen"}, {"item_id": 21109485, "text": "That article links to this page about what a massive hack ClearType (Microsoft&#x27;s subpixel anti-aliasing in Windows) is and I love it: <a href=\"http:&#x2F;&#x2F;rastertragedy.com&#x2F;RTRCh4.htm#Sec1\" rel=\"nofollow\">http:&#x2F;&#x2F;rastertragedy.com&#x2F;RTRCh4.htm#Sec1</a>", "by": "TazeTSchnitzel"}, {"item_id": 21107990, "text": "Once upon a time I wrote an automated newspaper layout&#x2F;preview system in Cocoa, the rendering engine in MacOS.<p>It was the only thing I could find that could do high quality text (ligatures, OpenType fonts, etc.), had native CMYK support, and could produce a print ready PDF or JPEG preview in milliseconds.<p>I can\u2019t open source the code, but if anyone ever needs to embark on something similar I\u2019d be happy to share what I learnt.", "by": "scraplab"}, {"item_id": 21108822, "text": "&gt; If you&#x27;re in Safari or Edge, this might still look ok! If you&#x27;re in Firefox or Chrome, it looks awful, like this: <a href=\"https:&#x2F;&#x2F;gankra.github.io&#x2F;blah&#x2F;text-hates-you&#x2F;transparent-cursive.png\" rel=\"nofollow\">https:&#x2F;&#x2F;gankra.github.io&#x2F;blah&#x2F;text-hates-you&#x2F;transparent-cur...</a><p>It doesn&#x27;t look awful in Firefox, it looks perfect (it&#x27;s version 26 of Firefox though.) This is what I see <a href=\"https:&#x2F;&#x2F;i.imgur.com&#x2F;sjvqycv.png\" rel=\"nofollow\">https:&#x2F;&#x2F;i.imgur.com&#x2F;sjvqycv.png</a>", "by": "privethedge"}, {"item_id": 21106203, "text": "It seems that the term &quot;subpixel&quot; is overloaded. In one meaning the term refers to the RGB parts. In another meaning the result looks different when the text is shifted by less than a pixel, even on a monochrome screen.", "by": "amelius"}, {"item_id": 21106342, "text": "&gt; Synthetic bold: paint every glyph multiple times with a slight offset in your text-direction.<p>Designers forgetting to include a bold version of their web fonts is one of my biggest bug bears. It always stands out, especially on Safari on iOS as you zoom in and out.", "by": "sings"}, {"item_id": 21109409, "text": "This is a nice intuitive introduction for the naive. Of course - there is more. @euske explains some extra trouble for CJK. There is also the hell of _direction_ - RTL vs LTR text on the same line. There is a complex bidirectional algorithm that&#x27;s part of the Unicode standard [1], and it involves breaks up text into runs of RTL and LTR text - but it&#x27;s not at all trivial, since many characters are actually neutral, like punctuation marks.<p>What&#x27;s more, Unicode has a lot of control characters, that don&#x27;t get rendered into glyphs but affect text rendering. These can be pretty tame, like space and non-breaking space - but some are rather nastly, like pushing and popping a stack of RTL-vs-LTR state (yes, it nests).<p>[1] : <a href=\"http:&#x2F;&#x2F;www.unicode.org&#x2F;reports&#x2F;tr9&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.unicode.org&#x2F;reports&#x2F;tr9&#x2F;</a>", "by": "einpoklum"}, {"item_id": 21106063, "text": "Fun fact about subpixel antialiasing: at some point, Firefox was printing the subpixels when printing PDFs displayed with PDF.js. That looked awful. I&#x27;m actually not sure whether that was fixed, as I haven&#x27;t printed in years (also, I have disabled subpixel AA for a while because of my dual monitor not in the same direction setup)", "by": "glandium"}, {"item_id": 21106723, "text": "&gt;Rendering text, how hard could it be? As it turns out, incredibly hard!<p>Related undesired complexities&#x2F;heterogeneities I encountered while implementing a simple text drawing API on top of various libraries (cf. &quot;Pain points&quot;, near the bottom):<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;jeffhain&#x2F;jolikit&#x2F;blob&#x2F;master&#x2F;README-BWD.md\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;jeffhain&#x2F;jolikit&#x2F;blob&#x2F;master&#x2F;README-BWD.m...</a>", "by": "jffhn"}, {"item_id": 21106206, "text": "&quot;If you&#x27;re in Firefox or Chrome, it looks awful&quot;<p>Looks correct in Firefox 69.0.1 on Windows here. In Chrome it looks awful as described. In both the &quot;bow&quot; at the top overlaps the text on the previous line.", "by": "1wd"}, {"item_id": 21107873, "text": "I realize it\u2019s probably too late, but as a graphics person, every time I read about text antialiasing, I wish we could rewind and fix the terminology of \u201cSubpixel antialiasing\u201d and \u201cGreyscale antialiasing\u201d. It seems problematic that greyscale antialiasing involves subpixel sampling and color channels.<p>I\u2019d suggest \u201cLCD antialiasing\u201d to replace \u201csubpixel antialiasing\u201d. And regular antialiasing doesn\u2019t really need a term, it was already established long before LCDs existed. AFAICT \u201cGreyscale antialiasing\u201d was made up only to differentiate regular antialiasing from LCD antialiasing.", "by": "dahart"}, {"item_id": 21107027, "text": "It seems like you\u2019d need to read at least a few dozen languages fluently to be able to meaningfully reason about some of these issues.  I can\u2019t imagine what sort of educational background experts on rendering would have.", "by": "commandlinefan"}, {"item_id": 21107796, "text": "&gt; So subpixel-AA is a really neat hack that can significantly improve text legibility, great! But, sadly, it&#x27;s also a huge pain in the neck!<p>When playing around with FreeType&#x27;s ftview demo program, text rendered with an OTF&#x2F;CFF font using the Adobe CFF renderer with stem darkening enabled actually looks pretty good with grayscale rendering. Subpixel rendering is not strictly necessary.<p>&gt; <a href=\"https:&#x2F;&#x2F;gankra.github.io&#x2F;blah&#x2F;text-hates-you&#x2F;#aa-breaks-glyph-caches\" rel=\"nofollow\">https:&#x2F;&#x2F;gankra.github.io&#x2F;blah&#x2F;text-hates-you&#x2F;#aa-breaks-glyp...</a><p>I think the author mixes up two concepts here, hinting and subpixel positioning.<p>A TrueType font can change stuff around on the x and y-axis. Applying hinting on the x-axis messes with your layouting and prevents subpixel positioning on the x-axis. What you do is apply hinting on the y-axis only (FreeType calls this slight hinting, DirectWrite more or less does this -- not quite, but close enough) so you are free to shift glyphs around on the x-axis. This helps with displaying text with a more even texture on LoDPI screens. On *nixes, Chrome does this, Firefox doesn&#x27;t.", "by": "mmmrk"}, {"item_id": 21106645, "text": "Subpixel AA is basically just trading color resolution for spatial. It\u2019s true that it\u2019s not composable, but you can actually \u201cfix\u201d that by keeping it in 3x horizontal format as long as possible, then actually rendering to 1x with subpixel detail later.<p>P.S.: because subpixel effectively gives you 3x horizontal resolution, it looks terrible to still fit to a pixel grid horizontally. Check the Anti-grain geometry article on font rendering for more cool font rendering bits, I recall it being very interesting.", "by": "jchw"}, {"item_id": 21106567, "text": "For the color example they say &quot;here&#x27;s what they look like in Chrome and safari&quot;... and show some horrible mess, yet I&#x27;m on Chrome and that isn&#x27;t what I see at all?<p>The text I see looks fine, although the font is different.<p><a href=\"https:&#x2F;&#x2F;imgur.com&#x2F;a&#x2F;5JZVZCB\" rel=\"nofollow\">https:&#x2F;&#x2F;imgur.com&#x2F;a&#x2F;5JZVZCB</a>", "by": "likeclockwork"}, {"item_id": 21106577, "text": "Some things are indeed way harder than they seem. Some others I came across:<p>- time<p>- indoor positioning", "by": "koonsolo"}, {"item_id": 21107884, "text": "There are few things that scare me as a software engineer.  Regex usually comes to mind first, but then I remember ... text rendering.<p>Just reading Microsoft&#x27;s Michael J Kaplan&#x27;s blog (RIP) about Unicode, and how that plays into rendering, was daunting enough.<p>But this article really points out how ridiculous it can get.  No thanks, I&#x27;ll stick to the easy stuff like my current project, Angular 8 &#x2F; .Net Core, and let Firefox handle the tricky bits.", "by": "eternalny1"}, {"item_id": 21106229, "text": "&gt;3.2 Style Can Change Mid-Ligature<p>&gt;Here&#x27;s what they look like in Chrome and Safari:<p>Running 76.0.3809.132 here on Mac OS and it looks very different from the picture. Bug partially fixed?<p><a href=\"https:&#x2F;&#x2F;i.imgur.com&#x2F;CcjATLO.png\" rel=\"nofollow\">https:&#x2F;&#x2F;i.imgur.com&#x2F;CcjATLO.png</a>", "by": "ttsda"}, {"item_id": 21106070, "text": "One man&#x27;s antialiasing is another mans blur.  I, for one, prefer crisp bitmap fonts.", "by": "enriquto"}, {"item_id": 21107106, "text": "&gt; That said, if you take a screenshot of subpixel text you will absolutely be able to see the colors if you resize the image<p>I once tried to see the subpixel rendering using the Microsoft&#x27;s magnifying glass tool. Got disappointed - the tool just disabled subpixel rendering. Globally, not just the area being magnified.", "by": "praptak"}, {"item_id": 21106806, "text": "I find it... odd that an article on font rendering is using a 14px forced font size (default: 16px) making the article really hard to read on my 14&quot; laptop screen from a foot away. Subpixel antialiasing on my LCD screen is just not my problem here, author. :)", "by": "gravitas"}, {"item_id": 21108244, "text": null, "by": null}, {"item_id": 21108764, "text": "I miss non-AA\u2019d text. Like PalmOS or Windows 95.<p>Gotta love the sharpness of it somehow.", "by": "lostgame"}, {"item_id": 21109060, "text": "no it dorsnt. it hates you. :)", "by": "malicioususer11"}]