[{"item_id": 21091044, "text": "Don&#x27;t let the title fool you - 90% of the advice given in this book isn&#x27;t specific to Clojure, and boy is it good advice.<p>This book contains some of the deepest programming insights I&#x27;ve encountered, to be put on the same level as SICP or the Pragmatic Programmer.<p>The discussions on naming and abstraction are particularly illuminating, exposing some fundamental tradeoffs like synthetic vs natural names, or principled vs adaptable systems of abstractions. Were these notions more widespread, a lot of the pointless rants and debates we hear in programming circles would disappear.<p>I would not recommend this book to beginners - this book is most useful when you are experienced enough that your struggle is to make choices, not to get things to work.", "by": "valw"}, {"item_id": 21091658, "text": "I thought I wouldn&#x27;t live to see the day for Clojure related link to be the top link on HN. I had to reload 5 times.<p>Clojure&#x27;s cool, I am glad I got to work with it professionally. I did go back to Javascript, but it made me a better developer. It strikes a nice balance between being a pure functional language and being practical.", "by": "TickMark"}, {"item_id": 21091655, "text": "This is great! I really enjoy the author\u2019s use of philosophy as a guiding context&#x2F;point of analogy\u2014I feel like the majority of software engineers aren\u2019t necessarily aware that nearly that many of the principles of software development date back to developments in logic and mathematics in the 19th century (we are doing little more than using formal langauges, after all) (actually the use of the term \u201cindirection\u201d is a great example of this\u2014in the software industry, people have invented terms for things that have had long standing names and terminology around them already in logic and philosophy).<p>Hope this book also introduces some engineers to analytic philosophy too, a discipline that I feel is crucial for understanding any formal pursuits, and that is given far too little attention (thanks to the hyper-specialization of domains and knowledge).", "by": "voidhorse"}, {"item_id": 21090619, "text": "Bought it, read it, liked it. Most of it is applicable to any programming language. I remember there being very little code examples in the book.", "by": "chungus"}, {"item_id": 21093866, "text": "I really enjoyed this book, especially the chapter on naming.<p>As a programmer I named dozens of things a day, yet I never really got much advice on what makes a good name other than the standard &quot;make it clear&quot;. I wish there were more books out there that went as deep as this book on that topic.<p>Anyone have any recommendations?", "by": "ninetax"}, {"item_id": 21092739, "text": "Yay Clojure! It&#x27;s such a natural tool once you go all in on it.", "by": "CameronBarre"}, {"item_id": 21096068, "text": "Thank you for the link, I brought the book to add to my collection of Clojure books, Programming Clojure by Alex Miller, Stuart Halloway and Aaron Bedra has been my favourite so far<p>Would be good to get a Datomic Cloud book but I don&#x27;t know of any yet", "by": "slifin"}, {"item_id": 21093530, "text": "I love the design of that web-based audio player.", "by": "dmix"}]