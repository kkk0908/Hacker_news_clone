[{"item_id": 21097108, "text": "One of the issues that came to mind is how limited and overloaded the Linux error codes are, and EPERM might be one of the worst offenders. While obviously not expecting Linux to change that due compatibility concerns, it&#x27;d be wonderful if we&#x27;d have unique identifier for any code path (or nearly so) that causes error to be returned. Of course it&#x27;d be useful to have some grouping, so that applications that do not care do not need to know every possible error code, but for investigations it&#x27;d be useful to know exactly why something failed. For EPERM especially (but also others) there might some security concerns about leaking more information about why the request was denied, so in some cases some discretion is needed. But I&#x27;d be surprised if that is frequent true concern.<p>I do wonder how much stuff would break if you patched Linux to return error numbers with high bits set to autogenerated values. Obviously libc (and go if used) would need patching, but how many places call syscalls directly <i>and</i> are checking error codes carefully. Probably surprisingly long tail, but still could be fun experiment.", "by": "zokier"}, {"item_id": 21098699, "text": "I was super surprised about ability to lift kernel lockdown programmatically, using sysrq_trigger file. I think it completely defeats entire point of the lockdown - it is like a safe with spare key duct-taped to the side, annoying but useless against any advisory.<p>The original kernel patch had a facility to disable programming lockdown lifting, but this apparently did not make it into the kernel he is using. Hopefully this was intentional, to make this less annoying for users during the testing period.", "by": "theamk"}, {"item_id": 21097605, "text": "This is not the first time that security patches have caused eBPF to behave oddly: <a href=\"https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;ebpf-cant-count&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;ebpf-cant-count&#x2F;</a> is an <i>amazing</i> anecdote about how side-channel mitigations + a bug in the BPF verifier caused arithmetic bugs to appear.<p>I hope that by the time things begin to hit mainline, Cloudflare&#x27;s engineers will chime in with ideas that allow (e)BPF to continue to run, as they seem to use it widely internally.", "by": "btown"}]